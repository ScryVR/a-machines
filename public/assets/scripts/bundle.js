/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/mafiu/dist/generator.js":
/*!**********************************************!*\
  !*** ./node_modules/mafiu/dist/generator.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"registerMafiuComponent\": () => (/* binding */ registerMafiuComponent)\n/* harmony export */ });\n/* harmony import */ var _getStateObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getStateObject.js */ \"./node_modules/mafiu/dist/getStateObject.js\");\n/* harmony import */ var _getParsedTemplate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getParsedTemplate.js */ \"./node_modules/mafiu/dist/getParsedTemplate.js\");\nfunction registerMafiuComponent({name:t,template:e,data:i={},hooks:s={},handlers:a={}}){getImplicitVariables(e).forEach(t=>{i[t]=null!=(t=i[t])?t:\"\"}),i._stateVars=Object.keys(i),e=(0,_getParsedTemplate_js__WEBPACK_IMPORTED_MODULE_1__.getParsedTemplate)(e,i);var r=class extends HTMLElement{constructor(){super()}static get observedAttributes(){return i._stateVars.map(t=>t.toLowerCase())}connectedCallback(){this.innerHTML=e,this.addListeners(),this.dependencyTree=this.parseDependencies(),Object.assign(s,this.getRenderHooks({data:i,hooks:s})),this.state=(0,_getStateObject_js__WEBPACK_IMPORTED_MODULE_0__.getStateObject)(this,{data:i,hooks:s}),this.handlers=a,this.state._stateVars.forEach(t=>{this.hasAttribute(t)&&this.state&&(this.state[t]=this.getAttribute(t))})}attributeChangedCallback(e,t,s){var a;this.state&&(a=i._stateVars.find(t=>t.toLowerCase()===e),this.state[a]=s)}parseDependencies(){const r={};return this.querySelectorAll(\"[has-mdeps]\").forEach(a=>{const t=a.getAttributeNames().filter(t=>t.startsWith(\"mdep\"));t.forEach(t=>{let[,e,s]=t.split(\"-\");(s=i._stateVars.find(t=>t.toLowerCase()===s))&&(r[s]||(r[s]=[]),r[s].push({el:a,attribute:e,innerText:!e}))})}),r}getRenderHooks({data:t,hooks:s}){return Object.keys(t).reduce((t,e)=>(t[e]=s[e]||[],t[e].push(s=>{var t;this.dependencyTree&&null!=(t=this.dependencyTree[e])&&t.forEach(({el:t,attribute:e})=>{e?t.setAttribute(e,s):t.innerText=s})}),t),{})}addListeners(){this.querySelectorAll(\"[mbind]\").forEach(t=>{const[e,s]=t.getAttribute(\"mbind\").split(\":\");console.log(\"Going to add a listener\",e,s),t.addEventListener(s,t=>{this.state[e]=t.detail||t.target.value})}),this.querySelectorAll(\"[mhandle]\").forEach(t=>{const[e,s]=t.getAttribute(\"mhandle\").split(\":\");t.addEventListener(s,t=>{this.handlers[e].call(this,t),t.stopImmediatePropagation()})})}};window.customElements.define(t,r)}function getImplicitVariables(t){const e=[];return null!=(t=t.match(/{{([^}}]*)}}/gm))&&t.forEach(t=>{t=t.replace(\"{{\",\"\").replace(\"}}\",\"\");e.push(t)}),e}\n\n//# sourceURL=webpack://aframe-machines/./node_modules/mafiu/dist/generator.js?");

/***/ }),

/***/ "./node_modules/mafiu/dist/getParsedTemplate.js":
/*!******************************************************!*\
  !*** ./node_modules/mafiu/dist/getParsedTemplate.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getParsedTemplate\": () => (/* binding */ getParsedTemplate)\n/* harmony export */ });\nfunction getParsedTemplate(e,r){var a;let c=e;null!=(a=e.match(/[a-zA-Z-]*=\"{{[^}}]*}}\"/gm))&&a.forEach(e=>{const[a,l]=e.split(\"=\");var p=l.replace('\"{{',\"\").replace('}}\"',\"\"),p=`has-mdeps mdep-${a}-${p} ${a}=\"${null!=(p=r[p])?p:\"\"}\"`;c=c.replace(e,p)});return null!=(a=e.match(/{{[^}}]*}}/gm))&&a.forEach(e=>{var a=e.replace(\"{{\",\"\").replace(\"}}\",\"\"),a=`<span has-mdeps mdep--${a}>${null!=(a=r[a])?a:\"\"}</span>`;c=c.replace(e,a)}),c}\n\n//# sourceURL=webpack://aframe-machines/./node_modules/mafiu/dist/getParsedTemplate.js?");

/***/ }),

/***/ "./node_modules/mafiu/dist/getStateObject.js":
/*!***************************************************!*\
  !*** ./node_modules/mafiu/dist/getStateObject.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getStateObject\": () => (/* binding */ getStateObject)\n/* harmony export */ });\nfunction getStateObject(a,t){const{data:e={},hooks:c={}}=t;return new Proxy(e,{get(t,e){return\"addHook\"===e?(t,e)=>{c[t]||(c[t]=[]),c[t].push(e)}:Reflect.get(t,e)},set(e,r,o){var t;return null!=(t=c[r])&&t.forEach(t=>t.call(a,o,e[r])),Reflect.set(e,r,o)}})}\n\n//# sourceURL=webpack://aframe-machines/./node_modules/mafiu/dist/getStateObject.js?");

/***/ }),

/***/ "./src/styles/main.scss":
/*!******************************!*\
  !*** ./src/styles/main.scss ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://aframe-machines/./src/styles/main.scss?");

/***/ }),

/***/ "./src/scripts/a-machine.ts":
/*!**********************************!*\
  !*** ./src/scripts/a-machine.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"builtinRegistry\": () => (/* binding */ builtinRegistry),\n/* harmony export */   \"machineRegistry\": () => (/* binding */ machineRegistry),\n/* harmony export */   \"registerBuiltin\": () => (/* binding */ registerBuiltin),\n/* harmony export */   \"registerMachine\": () => (/* binding */ registerMachine)\n/* harmony export */ });\n/* harmony import */ var _machineState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./machineState */ \"./src/scripts/machineState.ts\");\n\n// @ts-ignore\nAFRAME.registerComponent(\"a-machine\", {\n    schema: {\n        machine: { type: \"string\" },\n    },\n    init() {\n        if (!machineRegistry[this.data.machine]) {\n            console.error(`a-machine could not register machine of type ${this.data.machine} - has this machine type been registered?`);\n            return;\n        }\n        if (!this.el.id) {\n            this.el.id = id();\n        }\n        this.state = { id: this.el.id };\n        Object.entries(machineRegistry[this.data.machine].listeners).forEach(([event, listener]) => {\n            const [eventName, scope = \"siblings\"] = event.split(\":\");\n            this.el.addEventListener(`aMachine:${eventName}`, (e) => {\n                listener(e, this.state, this.emitFactory(this.data.machine), _machineState__WEBPACK_IMPORTED_MODULE_0__.machineState);\n            });\n        });\n        this.el.addEventListener(\"click\", (event) => {\n            const listener = machineRegistry[this.data.machine].listeners[_machineState__WEBPACK_IMPORTED_MODULE_0__.machineState.selectedAction];\n            if (listener) {\n                listener(event, this.state, this.emitFactory(this.data.machine), _machineState__WEBPACK_IMPORTED_MODULE_0__.machineState);\n            }\n            event.stopPropagation();\n        });\n    },\n    emitFactory(machine) {\n        return (event, payload) => {\n            var _a;\n            if ((_a = machineRegistry[machine].canEmit) === null || _a === void 0 ? void 0 : _a.includes(event)) {\n                this.emit.call(this, event, payload);\n            }\n            else {\n                console.error(`a-machine \"${this.data.machine}\" tried to emit event \"${event}\", but did not include it in its \"canEmit\" array`);\n            }\n        };\n    },\n    emit(event, payload) {\n        // TODO: Find a way to avoid computing the connected elements on the fly. Probably some kind of MutationObserver\n        // Emit events to the direct children, direct parent, or direct siblings\n        const [eventName, scope = \"siblings\"] = event.split(\":\");\n        let connected = [this.el.parentElement];\n        if (scope === \"siblings\") {\n            connected = Array.from(this.el.parentElement.children).filter((el) => el.hasAttribute(\"a-machine\"));\n        }\n        else if (scope === \"children\") {\n            connected = Array.from(this.el.children).filter((el) => el.hasAttribute(\"a-machine\"));\n        }\n        else if (scope === \"builtins\") {\n            if (builtinRegistry[eventName]) {\n                // NOTE: Calls to built-in handlers have a different signature. Might change this later.\n                builtinRegistry[eventName].listener({ detail: payload });\n            }\n            else {\n                console.warn(`Received a call to a unregistered built-in event: ${eventName}`);\n            }\n        }\n        connected.forEach((el) => {\n            el.dispatchEvent(new CustomEvent(`aMachine:${eventName}`, { detail: payload }));\n        });\n    },\n});\nconst machineRegistry = {};\nfunction registerMachine(machine) {\n    if (machineRegistry[machine.name]) {\n        throw new Error(`a-machine tried to register ${machine.name}, but a machine with this name is already registered`);\n    }\n    machineRegistry[machine.name] = machine;\n}\nconst builtinRegistry = {};\nfunction registerBuiltin(event, builtin, override = false) {\n    if (builtinRegistry[event] && !override) {\n        throw new Error(`a-machine tried to register ${event}, but a built-in with this name is already registered`);\n    }\n    builtinRegistry[event] = builtin;\n}\nfunction id() {\n    // There's some kind of weird typing issue where this function is not recognized by TS\n    // This is a dumb way around that.\n    const c = crypto;\n    return \"machine-\" + c.randomUUID();\n}\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/a-machine.ts?");

/***/ }),

/***/ "./src/scripts/components/a-machine--footer.ts":
/*!*****************************************************!*\
  !*** ./src/scripts/components/a-machine--footer.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mafiu_dist_generator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mafiu/dist/generator */ \"./node_modules/mafiu/dist/generator.js\");\n/* harmony import */ var _machineState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../machineState */ \"./src/scripts/machineState.ts\");\n// @ts-ignore\n\n\nconst name = \"a-machine--footer\";\nconst ACTIONS = [\"interact\", \"build\", \"set material\"];\nlet template = /*html*/ `\n<style>\n  scrolling-selector.has-swiping-indicator::before {\n    content: \"\";\n    height: 30px;\n    width: 30px;\n    position: absolute;\n    top: 0;\n    left: 60px;\n    background: rgba(0,255,255,0.3);\n    border-radius: 100%;\n    opacity: 0;\n    animation: swipe 800ms infinite ease-out;\n    animation-delay: 3s;\n  }\n  @keyframes swipe {\n    from, to { top: 70px; opacity: 1; }\n    90% { top: 20px; opacity: 1; }\n  }\n  scrolling-selector {\n    transition: max-width 0.8s, padding 0.2s;\n    transition-delay: 0.5s;\n    max-width: 200px;\n  }\n  scrolling-selector.collapsed {\n    max-width: 0;\n    padding: 0;\n    overflow: hidden;\n  }\n</style>\n<scrolling-selector\n  class=\"has-swiping-indicator\"\n  style=\"position: relative;\"\n  options=\"{{actions}}\"\n  mhandle=\"onSelectAction:select\">\n</scrolling-selector>\n<scrolling-selector\n  class=\"collapsed\"\n  id=\"arg-selector\"\n  options=\"\"\n  mhandle=\"onSelectArg:select\"\n>\n</scrolling-selector>\n`;\n(0,mafiu_dist_generator__WEBPACK_IMPORTED_MODULE_0__.registerMafiuComponent)({\n    name,\n    template,\n    data: {\n        collapsed: true,\n        actions: ACTIONS.join(\",\")\n    },\n    hooks: {\n        selectedAction: [\n            (action) => {\n                _machineState__WEBPACK_IMPORTED_MODULE_1__.machineState.selectedAction = action.replace(/\\s/g, \"_\"); // TODO: find a better way of converting between nice human names and action names\n            },\n        ],\n        hasArg: [\n            function (newVal) {\n                if (newVal) {\n                    // @ts-ignore\n                    const args = getArgs(this.state.selectedAction);\n                    this.querySelector(\"#arg-selector\").setAttribute(\"options\", args.join(\",\"));\n                    this.querySelector(\"#arg-selector\").classList.remove(\"collapsed\");\n                }\n                else {\n                    this.querySelector(\"#arg-selector\").classList.add(\"collapsed\");\n                }\n            },\n        ],\n    },\n    handlers: {\n        onSelectAction(event) {\n            var _a;\n            this.state.selectedAction = event.detail.selection;\n            this.state.hasArg = getArgs(event.detail.selection).length;\n            (_a = this.querySelector(\".has-swiping-indicator\")) === null || _a === void 0 ? void 0 : _a.classList.remove(\"has-swiping-indicator\");\n            this.dispatchEvent(new CustomEvent(\"selection\", { detail: { action: event.detail.selection } }));\n        },\n        onSelectArg(event) {\n            _machineState__WEBPACK_IMPORTED_MODULE_1__.machineState.actionArg = event.detail.selection;\n            this.dispatchEvent(new CustomEvent(\"selection\", { detail: { arg: event.detail.selection } }));\n        },\n    },\n});\nfunction getArgs(action) {\n    switch (action) {\n        case \"build\":\n            return [\"box\", \"sphere\", \"cylinder\", \"copy\", ...(_machineState__WEBPACK_IMPORTED_MODULE_1__.machineState.user.customBuildings || [])];\n        case \"set material\":\n            return Object.keys(_machineState__WEBPACK_IMPORTED_MODULE_1__.machineState.user.resources).filter(key => _machineState__WEBPACK_IMPORTED_MODULE_1__.machineState.user.resources[key].quantity).sort();\n        default:\n            return [];\n    }\n}\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/components/a-machine--footer.ts?");

/***/ }),

/***/ "./src/scripts/components/index.ts":
/*!*****************************************!*\
  !*** ./src/scripts/components/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _a_machine_footer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a-machine--footer */ \"./src/scripts/components/a-machine--footer.ts\");\n/* harmony import */ var _scrolling_selector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scrolling-selector */ \"./src/scripts/components/scrolling-selector.ts\");\n\n\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/components/index.ts?");

/***/ }),

/***/ "./src/scripts/components/scrolling-selector.ts":
/*!******************************************************!*\
  !*** ./src/scripts/components/scrolling-selector.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mafiu_dist_generator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mafiu/dist/generator */ \"./node_modules/mafiu/dist/generator.js\");\n/* harmony import */ var mafiu_dist_getParsedTemplate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mafiu/dist/getParsedTemplate */ \"./node_modules/mafiu/dist/getParsedTemplate.js\");\n// @ts-ignore\n\n// @ts-ignore\n\nconst name = \"scrolling-selector\";\nfunction generateSelectOptions(options, selected) {\n    return /*html*/ `\n  <div class=\"empty-spacer\"></div>\n  ${options\n        .map((a) => `<button class=\"${a === selected ? \"selected-option\" : \"not-selected\"} noselect\" data-option=\"${a}\">${a}</button>`)\n        .join(\"\")}\n  <div class=\"empty-spacer\"></div>\n  `;\n}\nconst template = /*html*/ `\n<style>\n  .scrolling-selector .selected-option {\n    color: #0dd !important;\n  }\n  .scrolling-selector button {\n    height: 40px;\n    font-size: 16px;\n    flex-shrink: 0;\n    background: none;\n    outline: none;\n    border: none;\n    padding: 0;\n    margin: 0;\n    color: transparent;\n    transition: color 0.3s;\n  }\n  .scrolling-selector.active button {\n    color: rgba(0,0,0,0.5);\n  }\n  .scrolling-selector {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    max-height: 120px;\n    overflow: auto;\n    pointer-events: auto;\n    scrollbar-width: none;  /* Firefox */\n    scroll-behavior: smooth;\n    position: relative;\n  }\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  .empty-spacer {\n    min-height: 40px;\n    width: 100%;\n  }\n</style>\n<div style=\"position: relative;\">\n  <div class=\"{{scrollUpIndicatorClass}}\"></div>\n    <div\n      class=\"scrolling-selector\"\n      mhandle=\"onScroll:scroll\"\n    >\n    </div>\n  <div class=\"{{scrollDownIndicatorClass}}\"></div>\n</div>\n`;\n(0,mafiu_dist_generator__WEBPACK_IMPORTED_MODULE_0__.registerMafiuComponent)({\n    name,\n    template,\n    data: {\n        options: \"\",\n    },\n    hooks: {\n        selectedOption: [\n            function (newSelection, oldSelection) {\n                if (newSelection !== oldSelection) {\n                    this.dispatchEvent(new CustomEvent(\"select\", { detail: { selection: newSelection } }));\n                }\n            },\n        ],\n        selectedBtn: [\n            function (newVal) {\n                this.querySelector(\".selected-option\").classList.remove(\"selected-option\");\n                newVal === null || newVal === void 0 ? void 0 : newVal.classList.add(\"selected-option\");\n            },\n        ],\n        options: [\n            function (options) {\n                const optionsList = options.split(\",\");\n                this.querySelector(\".scrolling-selector\").innerHTML = (0,mafiu_dist_getParsedTemplate__WEBPACK_IMPORTED_MODULE_1__.getParsedTemplate)(generateSelectOptions(optionsList, optionsList[0]));\n                this.querySelector(\".scrolling-selector\").scrollTop = 0;\n                this.state.selectedBtn = this.querySelector(\"button\");\n                this.state.selectedOption = optionsList[0];\n            },\n        ],\n    },\n    handlers: {\n        onScroll(event) {\n            // Update selected action\n            const buttons = Array.from(event.target.querySelectorAll(\"button\"));\n            const buttonIndex = Math.round(event.target.scrollTop / 40);\n            if (!buttons[buttonIndex]) {\n                return;\n            }\n            this.state.selectedBtn = buttons[buttonIndex];\n            this.state.selectedOption =\n                this.state.selectedBtn.getAttribute(\"data-option\");\n            // UI stuff\n            event.target.classList.add(\"active\");\n            clearTimeout(this.state.setInactiveTimeout);\n            this.state.setInactiveTimeout = setTimeout(() => {\n                event.target.classList.remove(\"active\");\n                event.target.scrollTop = Math.round(event.target.scrollTop / 40) * 40;\n            }, 300);\n        },\n    },\n});\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/components/scrolling-selector.ts?");

/***/ }),

/***/ "./src/scripts/default-builtins.ts":
/*!*****************************************!*\
  !*** ./src/scripts/default-builtins.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"activateTouchListener\": () => (/* binding */ activateTouchListener),\n/* harmony export */   \"promptForText\": () => (/* binding */ promptForText)\n/* harmony export */ });\n/* harmony import */ var _a_machine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a-machine */ \"./src/scripts/a-machine.ts\");\n/* harmony import */ var _machineState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./machineState */ \"./src/scripts/machineState.ts\");\n\n\nconst promptForText = {\n    name: \"promptForText\",\n    listener: promptForTextListener,\n    metadata: {\n        \"promptForText:builtins\": {\n            description: \"Show text input modal with submit button\",\n        },\n    },\n    canEmit: [\"_textChanged\"],\n};\nfunction promptForTextListener(event) {\n    var _a;\n    const scene = document.querySelector(\"a-scene\");\n    if (!((_a = scene.getAttribute(\"webxr\")) === null || _a === void 0 ? void 0 : _a.overlayElement)) {\n        console.warn(\"a-machine could not prompt for text - no webxr.overlayElement defined on a-scene\");\n        return;\n    }\n    const textInputModal = document.createElement(\"div\");\n    textInputModal.classList.add(\"a-machine-modal\");\n    textInputModal.innerHTML = \"<textarea></textarea><button>Submit</button>\";\n    textInputModal.querySelector(\"button\").addEventListener(\"click\", () => {\n        sendEventToTarget(event.detail.id, \"_textChanged\", {\n            text: textInputModal.querySelector(\"textarea\").value,\n        });\n        textInputModal.remove();\n    });\n    scene.getAttribute(\"webxr\").overlayElement.appendChild(textInputModal);\n    textInputModal.querySelector(\"textarea\").focus();\n}\nconst activateTouchListener = {\n    name: \"activateTouchListener\",\n    metadata: {\n        \"activateTouchListener:builtins\": {\n            description: \"Add drag handler to DOM overlay\",\n        },\n    },\n    listener: createDomTouchListener,\n    canEmit: [\"drag\", \"twoFingerDrag\", \"setDragProperty\", \"gridAlign\", \"createdGroup\"],\n};\nlet dragTargetId = \"\";\nconst groupNumber = groupNumberGenerator();\nfunction createDomTouchListener(event) {\n    var _a;\n    dragTargetId = event.detail.id;\n    let touchListener = document.querySelector(\".a-machine-touch-listener\");\n    if (touchListener) {\n        touchListener.style.pointerEvents = \"auto\";\n        touchListener.style.visibility = \"visible\";\n        return;\n    }\n    const scene = document.querySelector(\"a-scene\");\n    if (!((_a = scene.getAttribute(\"webxr\")) === null || _a === void 0 ? void 0 : _a.overlayElement)) {\n        console.warn(\"a-machine could not prompt for text - no webxr.overlayElement defined on a-scene\");\n        return;\n    }\n    touchListener = document.createElement(\"div\");\n    touchListener.classList.add(\"a-machine-touch-listener\");\n    if (customElements.get(\"a-machine-touch-ui\")) {\n        touchListener.innerHTML = \"<a-machine-touch-ui></a-machine-touch-ui>\";\n    }\n    else {\n        console.warn(\"To add custom UI to the touch listener, define a Web Component named <a-machine-touch-ui>\");\n        touchListener.innerHTML =\n            /*html*/ `\n      <div class=\"button-wrapper\">\n        <button id='advanced-menu-btn'>&Hat;</button>\n        <button id='done-btn'>Done</button>\n        <button id='rotate-btn'>Rotate</button>\n        <button id='cancel-btn'>Cancel</button>\n      </div>\n      <div class=\"advanced-menu\"></div>\n      `;\n        touchListener.querySelector(\"#done-btn\").addEventListener(\"click\", () => {\n            var _a;\n            (_a = _machineState__WEBPACK_IMPORTED_MODULE_1__.machineState.groupProxy) === null || _a === void 0 ? void 0 : _a.setAttribute(\"visible\", false);\n            document.querySelectorAll(\"[data-current-group]\").forEach((el) => {\n                el.removeAttribute(\"data-current-group\");\n                el.removeAttribute(\"data-unselected\");\n                sendEventToTarget(el.getAttribute(\"id\"), \"doneBuilding\", {});\n            });\n            touchListener.style.pointerEvents = \"none\";\n            touchListener.style.visibility = \"hidden\";\n        });\n        touchListener.querySelector(\"#rotate-btn\").addEventListener(\"click\", (event) => {\n            event.target.classList.toggle(\"active\");\n            const selectedProperty = event.target.classList.contains(\"active\") ? \"rotation\" : \"scale\";\n            sendEventToTarget(dragTargetId, \"setDragProperty\", { selectedProperty });\n        });\n        touchListener.querySelector(\"#cancel-btn\").addEventListener(\"click\", () => {\n            var _a;\n            (_a = _machineState__WEBPACK_IMPORTED_MODULE_1__.machineState.groupProxy) === null || _a === void 0 ? void 0 : _a.setAttribute(\"visible\", false);\n            document.querySelectorAll(\"[data-current-group]\").forEach((el) => {\n                el.removeAttribute(\"data-current-group\");\n                el.removeAttribute(\"data-unselected\");\n                sendEventToTarget(el.getAttribute(\"id\"), \"cancelBuilding\", {});\n            });\n            touchListener.style.pointerEvents = \"none\";\n            touchListener.style.visibility = \"hidden\";\n        });\n    }\n    let prevTouch = null;\n    let touchStartEvt = null;\n    let isClicking = true;\n    touchListener.addEventListener(\"touchstart\", (event) => {\n        prevTouch = event.touches[0];\n        touchStartEvt = event;\n        isClicking = true;\n    }, { passive: true });\n    touchListener.addEventListener(\"touchmove\", (touchEvent) => {\n        isClicking = false;\n        const delta = {\n            x: touchEvent.touches[0].clientX - prevTouch.clientX,\n            y: touchEvent.touches[0].clientY - prevTouch.clientY,\n        };\n        if (touchEvent.touches.length === 1) {\n            sendEventToTarget(dragTargetId, \"drag\", { delta });\n        }\n        if (touchEvent.touches.length === 2) {\n            sendEventToTarget(dragTargetId, \"twoFingerDrag\", { delta });\n        }\n        prevTouch = touchEvent.touches[0];\n    }, { passive: true });\n    let debouncing = false;\n    touchListener.addEventListener(\"touchend\", (touchEvent) => {\n        var _a;\n        if (!isClicking || debouncing) {\n            return;\n        }\n        debouncing = true;\n        setTimeout(() => {\n            debouncing = false;\n        }, 100);\n        if (touchEvent.touches.length === 0) {\n            // @ts-ignore\n            const cursor = document.querySelector(\"[cursor]\").components.cursor;\n            if (cursor) {\n                cursor.onCursorDown.call(cursor, touchStartEvt);\n                cursor.twoWayEmit(\"click\");\n            }\n        }\n        else if (touchEvent.touches.length === 1) {\n            sendEventToTarget(dragTargetId, \"gridAlign\", {});\n        }\n        else if (touchEvent.touches.length === 2) {\n            const currentGroup = document.querySelectorAll(\"[data-current-group]:not([data-unselected])\");\n            if (currentGroup.length === 1 || isAlreadyGroup(Array.from(currentGroup))) {\n                return;\n            }\n            const groupId = groupNumber.next().value;\n            currentGroup.forEach(el => {\n                el.setAttribute(\"groupId\", `group-${groupId}`);\n            });\n            (_a = _a_machine__WEBPACK_IMPORTED_MODULE_0__.builtinRegistry.createdGroup) === null || _a === void 0 ? void 0 : _a.listener({ detail: { group: currentGroup, groupId } });\n        }\n    });\n    touchListener.oncontextmenu = () => false;\n    scene.getAttribute(\"webxr\").overlayElement.appendChild(touchListener);\n}\nfunction sendEventToTarget(id, eventName, detail) {\n    document.getElementById(id).dispatchEvent(new CustomEvent(`aMachine:${eventName}`, {\n        detail,\n    }));\n}\nfunction* groupNumberGenerator() {\n    let groupNumber = 0;\n    while (1) {\n        groupNumber++;\n        yield groupNumber;\n    }\n}\nfunction isAlreadyGroup(selection) {\n    const groupId = selection[0].getAttribute(\"groupId\");\n    return groupId && selection.every(el => el.getAttribute(\"groupId\") === groupId);\n}\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/default-builtins.ts?");

/***/ }),

/***/ "./src/scripts/default-machines.ts":
/*!*****************************************!*\
  !*** ./src/scripts/default-machines.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"building\": () => (/* binding */ building),\n/* harmony export */   \"buttonMachine\": () => (/* binding */ buttonMachine),\n/* harmony export */   \"foundation\": () => (/* binding */ foundation),\n/* harmony export */   \"movingMachine\": () => (/* binding */ movingMachine),\n/* harmony export */   \"textInputMachine\": () => (/* binding */ textInputMachine),\n/* harmony export */   \"textRenderer\": () => (/* binding */ textRenderer),\n/* harmony export */   \"triggerTest\": () => (/* binding */ triggerTest)\n/* harmony export */ });\n/* harmony import */ var _handleMultiselect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handleMultiselect */ \"./src/scripts/handleMultiselect.ts\");\n/* harmony import */ var _transactionHandlers_deductEnergy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transactionHandlers/deductEnergy */ \"./src/scripts/transactionHandlers/deductEnergy.ts\");\n\n\nconst buttonMachine = {\n    name: \"button\",\n    listeners: {\n        interact: (event, state, emit) => {\n            emit(\"trigger\");\n        },\n    },\n    metadata: {\n        interact: {\n            description: \"Emit 'trigger' event to siblings\",\n        },\n    },\n    canEmit: [\"trigger\"],\n};\nconst triggerTest = {\n    name: \"triggerTest\",\n    canEmit: [\"consumedResources:builtins\"],\n    listeners: {\n        trigger: (event, state) => {\n            if (!state.count) {\n                state.count = 0;\n            }\n            state.count++;\n            console.log(`Machine has been triggered ${state.count} times`);\n        },\n        set_material: setMaterial,\n    },\n    metadata: {\n        trigger: {\n            description: \"Update internal trigger count and log event\",\n        },\n    },\n};\nconst textInputMachine = {\n    name: \"textInput\",\n    listeners: {\n        _textChanged: (event, state, emit) => {\n            state.text = event.detail.text;\n            emit(\"textChanged\", state);\n        },\n        interact: (event, state, emit) => {\n            emit(\"promptForText:builtins\", { id: state.id });\n        },\n        set_material: setMaterial,\n    },\n    metadata: {\n        _textChanged: {\n            description: \"receive internal callback from DOM and progagate to siblings\",\n        },\n        interact: {\n            description: \"Show input field for text entry\",\n        },\n    },\n    canEmit: [\"promptForText:builtins\", \"textChanged\"],\n};\nconst textRenderer = {\n    name: \"textRenderer\",\n    listeners: {\n        textChanged: (event, state) => {\n            const entity = document.getElementById(state.id);\n            entity.setAttribute(\"text\", { value: event.detail.text, side: \"double\" });\n        },\n    },\n    metadata: {\n        textChanged: {\n            description: \"Show text in VR environment\",\n        },\n    },\n};\nconst movingMachine = {\n    name: \"movingMachine\",\n    canEmit: [\"consumedResources:builtins\"],\n    listeners: {\n        interact: (event, state, emit) => {\n            // NOTE: If I want to run this in a vertex worker, this is no good. Machines should instead invoke a builtin by emitting an event.\n            // This is okay just for development\n            const entity = document.getElementById(state.id);\n            entity.emit(\"startAnimation\", null, false);\n        },\n        trigger: (event, state, emit) => {\n            // NOTE: If I want to run this in a vertex worker, this is no good. Machines should instead invoke a builtin by emitting an event.\n            // This is okay just for development\n            const entity = document.getElementById(state.id);\n            entity.emit(\"startAnimation\", null, false);\n        },\n        set_material: setMaterial,\n    },\n    metadata: {\n        trigger: {\n            description: \"Directly modify object3D to move entity\",\n        },\n    },\n};\nconst building = {\n    name: \"building\",\n    canEmit: [\n        \"activateTouchListener:builtins\",\n        \"createdBuilding:builtins\",\n        \"modifiedBuilding:builtins\",\n        \"consumedResources:builtins\",\n        \"createdGroup:builtins\",\n        \"outOfEnergy:builtins\",\n        \"outOfResources:builtins\",\n    ],\n    metadata: {\n        drag: {\n            description: \"Resize object\",\n        },\n        twoFingerDrag: {\n            description: \"Move object\",\n        },\n    },\n    listeners: {\n        interact: (event, state, emit, globalState) => {\n            var _a;\n            state.el = state.el || document.getElementById(state.id);\n            const isBeingSelected = !state.el.hasAttribute(\"data-current-group\") || state.el.hasAttribute(\"data-unselected\");\n            const isOnlySelection = !isBeingSelected && document.querySelectorAll(\"[data-current-group]\").length === 1;\n            if (isBeingSelected || isOnlySelection) {\n                // Mark element as selected\n                (_a = state.el.querySelector(\".selection-indicator\")) === null || _a === void 0 ? void 0 : _a.remove();\n                const selectionIndicator = document.createElement(state.el.tagName.toLowerCase());\n                selectionIndicator.setAttribute(\"material\", { emissive: \"#0ff\", wireframe: true, color: \"#0ff\" });\n                if (state.el.tagName === \"A-CYLINDER\") {\n                    selectionIndicator.setAttribute(\"geometry\", {\n                        segmentsRadial: 6,\n                        segmentsHeight: 1\n                    });\n                }\n                else if (state.el.tagName === \"A-SPHERE\") {\n                    selectionIndicator.setAttribute(\"geometry\", {\n                        segmentsWidth: 12,\n                        segmentsHeight: 12\n                    });\n                }\n                selectionIndicator.classList.add(\"selection-indicator\");\n                state.el.appendChild(selectionIndicator);\n                // Update selection state\n                (0,_handleMultiselect__WEBPACK_IMPORTED_MODULE_0__.select)(event, state, emit, globalState);\n                // Initialize state for handling transformations\n                state.initialState = {\n                    position: Object.assign({}, state.el.object3D.position),\n                    scale: Object.assign({}, state.el.object3D.scale),\n                    rotation: Object.assign({}, state.el.object3D.rotation)\n                };\n                const { face: { normal: { x, y, z }, }, uv, } = event.detail.intersection;\n                // Update state to indicate how to respond to different drags\n                state.dragProperties = {\n                    y: {\n                        resizeMultiplier: uv.y < 0.5 ? -1 : 1,\n                        offsetMultiplier: 1,\n                        attribute: \"y\",\n                    },\n                    x: {\n                        resizeMultiplier: uv.x < 0.5 ? -1 : 1,\n                        offsetMultiplier: -x || z,\n                        attribute: Math.abs(z) > Math.abs(x) ? \"x\" : \"z\",\n                    },\n                };\n                emit(\"activateTouchListener:builtins\", { id: state.id });\n            }\n            else {\n                (0,_handleMultiselect__WEBPACK_IMPORTED_MODULE_0__.unselect)(event, state, emit, globalState);\n                emit(\"modifiedBuilding:builtins\", { el: state.el });\n            }\n        },\n        set_material: setMaterial,\n        setDragProperty: (event, state) => {\n            state.selectedProperty = event.detail.selectedProperty;\n        },\n        drag: (event, state, emit, globalState) => {\n            (0,_handleMultiselect__WEBPACK_IMPORTED_MODULE_0__.transformMultiple)(event, state, globalState);\n            emit(\"modifiedBuilding:builtins\", { el: state.el });\n        },\n        twoFingerDrag: (event, state, emit, globalState) => {\n            (0,_handleMultiselect__WEBPACK_IMPORTED_MODULE_0__.translateMultiple)(event, state, globalState);\n            emit(\"modifiedBuilding:builtins\", { el: state.el });\n        },\n        setCurrentState: (event, state) => {\n            if (!state.initialState) {\n                return;\n            }\n            state.currentState = {\n                position: Object.assign({}, state.el.object3D.position),\n                scale: Object.assign({}, state.el.object3D.scale),\n                rotation: Object.assign({}, state.el.object3D.rotation)\n            };\n        },\n        scaleChange: (event, state) => {\n            var _a;\n            if (!state.initialState) {\n                return;\n            }\n            const scale = ((_a = state.currentState) === null || _a === void 0 ? void 0 : _a.scale) || state.initialState.scale;\n            const newScale = {\n                x: event.detail.scaleChange.x * scale.x,\n                y: event.detail.scaleChange.y * scale.y,\n                z: event.detail.scaleChange.z * scale.z,\n            };\n            state.el.object3D.scale.set(newScale.x, newScale.y, newScale.z);\n        },\n        rotationChange: (event, state, emit) => {\n            var _a;\n            if (!state.initialState) {\n                return;\n            }\n            const rotation = ((_a = state.currentState) === null || _a === void 0 ? void 0 : _a.rotation) || state.initialState.rotation;\n            const newRotation = {\n                x: event.detail.rotationChange.x + rotation._x,\n                y: event.detail.rotationChange.y + rotation._y,\n                z: event.detail.rotationChange.z + rotation._z,\n            };\n            state.el.object3D.rotation.set(newRotation.x, newRotation.y, newRotation.z);\n            emit(\"modifiedBuilding:builtins\", { el: state.el });\n        },\n        moveCentroid: (event, state, emit) => {\n            if (!state.initialState) {\n                return;\n            }\n            if (!state.el) {\n                state.el = document.getElementById(state.id);\n            }\n            state.el.object3D.position.set(event.detail.centroid.x, event.detail.centroid.y, event.detail.centroid.z);\n            emit(\"modifiedBuilding:builtins\", { el: state.el });\n        },\n        gridAlign: (event, state) => {\n            const { position, rotation } = state.el.object3D;\n            state.el.object3D.position.set(Math.round(position.x * 4) / 4, Math.round(position.y * 4) / 4, Math.round(position.z * 4) / 4);\n            const piOver4 = Math.PI / 4;\n            state.el.object3D.rotation.set(Math.round(rotation._x * piOver4) * piOver4, Math.round(rotation._y * piOver4) / piOver4, Math.round(rotation._z * piOver4) / piOver4);\n        },\n        build: createNewBuilding,\n        cancelBuilding: (event, state, emit) => {\n            var _a;\n            state.el.object3D.position.set(state.initialState.position.x, state.initialState.position.y, state.initialState.position.z);\n            state.el.object3D.scale.set(state.initialState.scale.x, state.initialState.scale.y, state.initialState.scale.z);\n            state.el.object3D.rotation.set(state.initialState.rotation._x, state.initialState.rotation._y, state.initialState.rotation._z);\n            (_a = state.el.querySelector(\".selection-indicator\")) === null || _a === void 0 ? void 0 : _a.remove();\n            emit(\"modifiedBuilding:builtins\", { el: state.el });\n        },\n        doneBuilding: (event, state, emit, globalState) => {\n            var _a, _b;\n            try {\n                // Handle energy costs\n                const { x, y, z } = state.el.object3D.scale;\n                const newSize = x * y * z;\n                const { x: oldX, y: oldY, z: oldZ } = state.initialState.scale;\n                const oldSize = oldX * oldY * oldZ;\n                const energyCost = Math.ceil(Math.abs(newSize - oldSize) / 4);\n                (0,_transactionHandlers_deductEnergy__WEBPACK_IMPORTED_MODULE_1__.deductEnergy)(energyCost);\n                (_a = state.el.querySelector(\".selection-indicator\")) === null || _a === void 0 ? void 0 : _a.remove();\n                emit(\"consumedResources:builtins\", { energy: energyCost });\n                // Silently handle consuming resources for now - I'm lazy\n                if (state.el.hasAttribute(\"resource\")) {\n                    let resource = state.el.getAttribute(\"resource\");\n                    try {\n                        (0,_transactionHandlers_deductEnergy__WEBPACK_IMPORTED_MODULE_1__.deductResources)(resource, newSize - oldSize);\n                        if (newSize < oldSize) {\n                            // Making structures smaller doesn't give you all the resources back.\n                            (0,_transactionHandlers_deductEnergy__WEBPACK_IMPORTED_MODULE_1__.deductResources)(resource, (oldSize - newSize) * 0.8);\n                        }\n                        console.log(\"modified resources due to size change\");\n                    }\n                    catch (err) {\n                        // If the user doesn't have enough resources, at least give the energy back.\n                        (0,_transactionHandlers_deductEnergy__WEBPACK_IMPORTED_MODULE_1__.deductEnergy)(energyCost);\n                        throw err;\n                    }\n                }\n            }\n            catch (err) {\n                console.error(\"Couldn't finish building\", err);\n                // If insuffient resources or energy, revert building state.\n                state.el.object3D.position.set(state.initialState.position.x, state.initialState.position.y, state.initialState.position.z);\n                state.el.object3D.scale.set(state.initialState.scale.x, state.initialState.scale.y, state.initialState.scale.z);\n                handleOverdraw(err, emit, event);\n            }\n            (_b = state.el.querySelector(\".selection-indicator\")) === null || _b === void 0 ? void 0 : _b.remove();\n            emit(\"modifiedBuilding:builtins\", { el: state.el });\n        },\n    },\n};\nconst foundation = {\n    name: \"foundation\",\n    listeners: {\n        build: createNewBuilding,\n    },\n    canEmit: [\n        \"createdBuilding:builtins\",\n        \"outOfEnergy:builtins\",\n        \"outOfResources:builtins\",\n    ],\n    metadata: {\n        build: {\n            description: \"Create a new structure.\",\n        },\n    },\n};\nfunction setMaterial(event, state, emit, globalState) {\n    if (globalState.actionArg) {\n        const resource = globalState.actionArg;\n        // @ts-ignore\n        const currentResource = document.getElementById(state.id).getAttribute(\"resource\");\n        const selectedResource = globalState.actionArg;\n        if (currentResource !== selectedResource) {\n            const el = document.getElementById(state.id);\n            const resourcesConsumed = el.object3D.scale.x * el.object3D.scale.y * el.object3D.scale.z;\n            if (currentResource) {\n                console.log(\"Should give back some resources...\");\n                // We are silently giving resources back for now. I'll worry about emitting an event later.\n                // Recycling resources isn't 100% efficient.\n                if (!globalState.user.resources[currentResource]) {\n                    globalState.user.resources[currentResource] = {\n                        quantity: 0,\n                        material: Object.entries(el.getAttribute(\"material\")).reduce((acc, [key, val]) => {\n                            if ([\"color\", \"transparent\", \"opacity\", \"shader\", \"wireframe\", \"emissive\", \"emissiveIntensity\"].includes(key)) {\n                                acc[key] = val;\n                            }\n                            return acc;\n                        }, {})\n                    };\n                    if (el.hasAttribute(\"light\")) {\n                        globalState.user.resources[currentResource].light = Object.entries(el.getAttribute(\"light\").reduce((acc, [key, val]) => {\n                            if ([\"color\", \"intensity\", \"decay\", \"distance\", \"type\", \"castShadow\"].includes(key)) {\n                                acc[key] = val;\n                            }\n                            return acc;\n                        }, {}));\n                    }\n                }\n                globalState.user.resources[currentResource].quantity += 0.8 * resourcesConsumed;\n            }\n            try {\n                (0,_transactionHandlers_deductEnergy__WEBPACK_IMPORTED_MODULE_1__.deductResources)(resource, resourcesConsumed);\n                (0,_transactionHandlers_deductEnergy__WEBPACK_IMPORTED_MODULE_1__.deductEnergy)(1);\n                emit(\"consumedResources:builtins\", { amount: resourcesConsumed, resource, energy: 1 });\n                document\n                    .getElementById(state.id)\n                    .setAttribute(\"material\", Object.assign({ shader: \"standard\" }, globalState.user.resources[selectedResource].material));\n                if (globalState.user.resources[selectedResource].light) {\n                    document\n                        .getElementById(state.id)\n                        .setAttribute(\"light\", globalState.user.resources[selectedResource].light);\n                }\n                else {\n                    document.getElementById(state.id).removeAttribute(\"light\");\n                }\n                document.getElementById(state.id).setAttribute(\"resource\", selectedResource);\n                emit(`modifiedBuilding:builtins`, { el });\n            }\n            catch (err) {\n                handleOverdraw(err, emit, event);\n            }\n        }\n    }\n}\nfunction createNewBuilding(event, state, emit, globalState) {\n    var _a;\n    const element = document.getElementById(state.id);\n    let tag = globalState.actionArg;\n    let scale = { x: 1, y: 1, z: 1 };\n    if (globalState.actionArg === \"copy\") {\n        tag = document.getElementById(state.id).tagName.toLowerCase().replace(\"a-\", \"\");\n        scale = element.object3D.scale;\n    }\n    if ([\"box\", \"sphere\", \"cylinder\", ...(globalState.user.customBuildings || [])].includes(tag)) {\n        const { detail: { intersection: { point, face: { normal }, }, }, } = event;\n        const newEl = document.createElement(`a-${tag}`);\n        const foundation = document.getElementById(state.id);\n        const isFoundation = ((_a = foundation.getAttribute(\"a-machine\")) === null || _a === void 0 ? void 0 : _a.machine) === \"foundation\";\n        const appendTarget = (isFoundation && globalState.foundationAppendTarget) ||\n            foundation.parentElement;\n        newEl.object3D.position.set(point.x, point.y - appendTarget.object3D.position.y + scale.y / 2, point.z);\n        newEl.object3D.scale.set(scale.x, scale.y, scale.z);\n        if (!isFoundation) {\n            newEl.object3D.position.x += normal.x * scale.x / 2;\n            newEl.object3D.position.y += normal.y * scale.y / 2;\n            newEl.object3D.position.z += normal.z * scale.z / 2;\n        }\n        newEl.setAttribute(\"a-machine\", { machine: \"building\" });\n        newEl.setAttribute(\"shadow\", { cast: true, receive: true });\n        newEl.setAttribute(\"material\", {\n            color: \"cyan\",\n        });\n        try {\n            (0,_transactionHandlers_deductEnergy__WEBPACK_IMPORTED_MODULE_1__.deductEnergy)(2);\n            if (globalState.buildHook &&\n                typeof globalState.buildHook === \"function\") {\n                globalState.buildHook(newEl);\n            }\n            appendTarget.appendChild(newEl);\n            emit(\"createdBuilding:builtins\", { el: newEl });\n        }\n        catch (err) {\n            handleOverdraw(err, emit, event);\n        }\n    }\n    else {\n        console.warn(\"Tried to create unknown building\", globalState.actionArg);\n    }\n}\nfunction handleOverdraw(err, emit, event) {\n    if (err.message === \"Insufficient energy\") {\n        emit(\"outOfEnergy:builtins\", { event });\n    }\n    else {\n        emit(\"outOfResources:builtins\", { event });\n    }\n}\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/default-machines.ts?");

/***/ }),

/***/ "./src/scripts/handleMultiselect.ts":
/*!******************************************!*\
  !*** ./src/scripts/handleMultiselect.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"select\": () => (/* binding */ select),\n/* harmony export */   \"transformMultiple\": () => (/* binding */ transformMultiple),\n/* harmony export */   \"translateMultiple\": () => (/* binding */ translateMultiple),\n/* harmony export */   \"unselect\": () => (/* binding */ unselect)\n/* harmony export */ });\n/**\n * The multiselection thing is probably the most complicated bit of machinery.\n * Therefore, I'm splitting out into its own function.\n * I should probably do this for all the other default machine handlers tbh\n */\nfunction transformMultiple(event, state, globalState) {\n    // Transform the group proxy parent\n    const { x, y } = event.detail.delta;\n    const property = state.selectedProperty || \"scale\";\n    if (Math.abs(x) > Math.abs(y)) {\n        let xAttribute = state.dragProperties.x.attribute;\n        if (property === \"rotation\") {\n            xAttribute = state.dragProperties.y.attribute;\n        }\n        const { resizeMultiplier, offsetMultiplier } = state.dragProperties.x;\n        globalState.groupProxy.object3D[property][xAttribute] +=\n            (x / 100) * resizeMultiplier;\n        if (property === \"scale\") {\n            globalState.groupProxy.object3D.position[state.dragProperties.x.attribute] +=\n                (x / 200) * offsetMultiplier;\n        }\n    }\n    else {\n        let yAttribute = state.dragProperties.y.attribute;\n        if (property === \"rotation\") {\n            yAttribute = state.dragProperties.x.attribute;\n        }\n        const { resizeMultiplier, offsetMultiplier } = state.dragProperties.y;\n        globalState.groupProxy.object3D[property][yAttribute] -=\n            (y / 100) * resizeMultiplier;\n        if (property === \"scale\") {\n            globalState.groupProxy.object3D.position[state.dragProperties.y.attribute] -=\n                (y / 200) * offsetMultiplier;\n        }\n    }\n    // Iterate over the proxy children and transform the original elements accordingly\n    // @ts-ignore\n    let quat = new THREE.Quaternion();\n    const root = document.querySelector(globalState.rootSelector);\n    // @ts-ignore\n    let rootWorldPos = new THREE.Vector3();\n    root.object3D.getWorldPosition(rootWorldPos);\n    globalState.groupProxy.querySelectorAll(\".proxy\").forEach((proxyEl) => {\n        proxyEl.object3D.getWorldPosition(proxyEl.original.object3D.position);\n        proxyEl.original.object3D.position.y -= rootWorldPos.y;\n        proxyEl.object3D.getWorldScale(proxyEl.original.object3D.scale);\n        if (property === \"rotation\") {\n            proxyEl.object3D.getWorldQuaternion(quat);\n            proxyEl.original.object3D.setRotationFromQuaternion(quat);\n        }\n    });\n}\nfunction translateMultiple(event, state, globalState) {\n    // Iterate over all the group elements and apply the translation\n    const { x, y } = event.detail.delta;\n    if (Math.abs(x) > Math.abs(y)) {\n        const { offsetMultiplier } = state.dragProperties.x;\n        globalState.groupProxy.object3D.position[state.dragProperties.x.attribute] +=\n            (x / 100) * offsetMultiplier;\n    }\n    else {\n        globalState.groupProxy.object3D.position[state.dragProperties.y.attribute] -= y / 100;\n    }\n    const root = document.querySelector(globalState.rootSelector);\n    // @ts-ignore\n    let rootWorldPos = new THREE.Vector3();\n    root.object3D.getWorldPosition(rootWorldPos);\n    globalState.groupProxy.querySelectorAll(\".proxy\").forEach((proxyEl) => {\n        // The original's new position is the proxy's world position minus the proxy parent's world position\n        proxyEl.object3D.getWorldPosition(proxyEl.original.object3D.position);\n        proxyEl.original.object3D.position.y -= rootWorldPos.y;\n    });\n}\nfunction select(event, state, emit, globalState) {\n    var _a;\n    state.el.setAttribute(\"data-current-group\", \"true\");\n    state.el.removeAttribute(\"data-unselected\", \"true\");\n    if (state.el.hasAttribute(\"groupId\")) {\n        const groupMates = document.querySelectorAll(`[groupId=${state.el.getAttribute(\"groupId\")}]`);\n        groupMates.forEach((el) => {\n            el.setAttribute(\"data-current-group\", \"true\");\n            el.components[\"a-machine\"].state.initialState = {\n                position: Object.assign({}, el.object3D.position),\n                scale: Object.assign({}, el.object3D.scale),\n                rotation: Object.assign({}, el.object3D.rotation)\n            };\n        });\n    }\n    (_a = globalState.groupProxy) === null || _a === void 0 ? void 0 : _a.remove();\n    globalState.groupProxy = getGroupProxy(\"[data-current-group]:not([data-unselected])\", globalState);\n}\nfunction unselect(event, state, emit, globalState) {\n    var _a, _b;\n    // Instead of removing data-current-group, mark the unselected element as unselected\n    // Preserving data-current-group makes it easy to do things like revert the state\n    document.getElementById(state.id).setAttribute(\"data-unselected\", \"true\");\n    (_a = state.el.querySelector(\".selection-indicator\")) === null || _a === void 0 ? void 0 : _a.remove();\n    (_b = globalState.groupProxy) === null || _b === void 0 ? void 0 : _b.remove();\n    globalState.groupProxy = getGroupProxy(\"[data-current-group]:not([data-unselected])\", globalState);\n}\n/**\n * This function receives a reference to a group of scene elements.\n * It returns a set of elements whose scales, rotations, and world positions are identical to the original group's.\n * The new elements (referred to as proxy elements) differ in that they are nested inside a wrapper element.\n * This wrapper element can be moved, rotated, scaled, etc.\n * Any edits to the proxy elements can be propagated to the originals.\n */\nfunction getGroupProxy(groupSelector, globalState) {\n    // Get all group elements\n    const group = Array.from(document.querySelectorAll(groupSelector));\n    // Create wrapper and position at the centroid\n    const centroidWrapperEl = document.createElement(\"a-entity\");\n    // Compute the centroid of all the group elements.\n    // The size of the group elements does not affect this calculation.\n    let centroid = group.reduce((acc, el) => {\n        el.object3D.getWorldPosition(centroidWrapperEl.object3D.position);\n        acc.x += centroidWrapperEl.object3D.position.x;\n        acc.y += centroidWrapperEl.object3D.position.y;\n        acc.z += centroidWrapperEl.object3D.position.z;\n        const { scale, position } = el.object3D;\n        acc.maxes.x = Math.max(acc.maxes.x, position.x + scale.x / 2);\n        acc.mins.x = Math.min(acc.mins.x, position.x - scale.x / 2);\n        acc.maxes.y = Math.max(acc.maxes.y, position.y + scale.y / 2);\n        acc.mins.y = Math.min(acc.mins.y, position.y - scale.y / 2);\n        acc.maxes.z = Math.max(acc.maxes.z, position.z + scale.z / 2);\n        acc.mins.z = Math.min(acc.mins.z, position.z - scale.z / 2);\n        return acc;\n    }, { x: 0, y: 0, z: 0, maxes: { x: -99999, y: -99999, z: -99999 }, mins: { x: 99999, y: 99999, z: 99999 } });\n    centroid.x /= group.length;\n    centroid.y /= group.length;\n    centroid.z /= group.length;\n    const root = document.querySelector(globalState.rootSelector);\n    // @ts-ignore\n    centroid.y -= root.object3D.position.y;\n    if (group.length > 1) {\n        const groupWrapperBox = document.createElement(\"a-box\");\n        groupWrapperBox.setAttribute(\"material\", { wireframe: true, emissive: \"#faf\", color: \"#faf\" });\n        groupWrapperBox.object3D.scale.set(centroid.maxes.x - centroid.mins.x, centroid.maxes.y - centroid.mins.y, centroid.maxes.z - centroid.mins.z);\n        centroidWrapperEl.appendChild(groupWrapperBox);\n    }\n    centroidWrapperEl.object3D.position.set(centroid.x, centroid.y, centroid.z);\n    // Create proxy children and append them to wrapper\n    group.forEach((el) => {\n        const proxyEl = document.createElement(\"a-entity\");\n        proxyEl.classList.add(\"proxy\");\n        proxyEl.original = el;\n        // I'm making some assumptions here about the DOM structure.\n        // This code won't work as expected if the group's parents have a non-zero rotation. This should be fine, at least for now.\n        const { scale, rotation } = el.object3D;\n        proxyEl.object3D.scale.set(scale.x, scale.y, scale.z);\n        proxyEl.object3D.rotation.set(rotation.x, rotation.y, rotation.z);\n        el.object3D.getWorldPosition(proxyEl.object3D.position);\n        proxyEl.object3D.position.sub(centroid);\n        proxyEl.object3D.position.y -= root.object3D.position.y;\n        // const attributes = [\"material\", \"color\", \"resource\", \"light\"]\n        // attributes.forEach(attr => {\n        //   proxyEl.setAttribute(attr, el.getAttribute(attr))\n        // })\n        centroidWrapperEl.appendChild(proxyEl);\n    });\n    document.querySelector(globalState.rootSelector).appendChild(centroidWrapperEl);\n    return centroidWrapperEl;\n}\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/handleMultiselect.ts?");

/***/ }),

/***/ "./src/scripts/machineState.ts":
/*!*************************************!*\
  !*** ./src/scripts/machineState.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"machineState\": () => (/* binding */ machineState)\n/* harmony export */ });\nconst machineState = {\n    selectedAction: \"interact\",\n    rootSelector: \"a-scene\",\n    targets: [],\n    // Todo: replace with class instance\n    user: {\n        energy: 100,\n        resources: {\n            wood: { material: { color: \"brown\" }, quantity: 100 },\n            stone: { material: { color: \"gray\" }, quantity: 100 }\n        }\n    }\n};\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/machineState.ts?");

/***/ }),

/***/ "./src/scripts/main.ts":
/*!*****************************!*\
  !*** ./src/scripts/main.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"builtinRegistry\": () => (/* reexport safe */ _a_machine__WEBPACK_IMPORTED_MODULE_3__.builtinRegistry),\n/* harmony export */   \"machineRegistry\": () => (/* reexport safe */ _a_machine__WEBPACK_IMPORTED_MODULE_3__.machineRegistry),\n/* harmony export */   \"registerBuiltin\": () => (/* reexport safe */ _a_machine__WEBPACK_IMPORTED_MODULE_3__.registerBuiltin),\n/* harmony export */   \"registerMachine\": () => (/* reexport safe */ _a_machine__WEBPACK_IMPORTED_MODULE_3__.registerMachine)\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ \"./src/scripts/components/index.ts\");\n/* harmony import */ var _default_machines__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./default-machines */ \"./src/scripts/default-machines.ts\");\n/* harmony import */ var _default_builtins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./default-builtins */ \"./src/scripts/default-builtins.ts\");\n/* harmony import */ var _a_machine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./a-machine */ \"./src/scripts/a-machine.ts\");\n\n\n\n\n\nObject.values(_default_machines__WEBPACK_IMPORTED_MODULE_1__).forEach(_a_machine__WEBPACK_IMPORTED_MODULE_3__.registerMachine);\nObject.entries(_default_builtins__WEBPACK_IMPORTED_MODULE_2__).forEach(([event, builtinMachine]) => (0,_a_machine__WEBPACK_IMPORTED_MODULE_3__.registerBuiltin)(event, builtinMachine));\n(0,_a_machine__WEBPACK_IMPORTED_MODULE_3__.registerBuiltin)(\"createdGroup\", {\n    name: \"createdGroupLogger\",\n    listener: (event) => {\n        console.log(\"Created a group\", event);\n    }\n});\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/main.ts?");

/***/ }),

/***/ "./src/scripts/transactionHandlers/deductEnergy.ts":
/*!*********************************************************!*\
  !*** ./src/scripts/transactionHandlers/deductEnergy.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deductEnergy\": () => (/* binding */ deductEnergy),\n/* harmony export */   \"deductResources\": () => (/* binding */ deductResources)\n/* harmony export */ });\n/* harmony import */ var _machineState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../machineState */ \"./src/scripts/machineState.ts\");\n\nfunction deductEnergy(cost) {\n    if (_machineState__WEBPACK_IMPORTED_MODULE_0__.machineState.user.energy < cost) {\n        throw new Error(\"Insufficient energy\");\n    }\n    _machineState__WEBPACK_IMPORTED_MODULE_0__.machineState.user.energy -= cost;\n}\nfunction deductResources(resource, consumption) {\n    var _a;\n    if (((_a = _machineState__WEBPACK_IMPORTED_MODULE_0__.machineState.user.resources[resource]) === null || _a === void 0 ? void 0 : _a.quantity) < consumption) {\n        throw new Error(\"Insufficient resources\");\n    }\n    _machineState__WEBPACK_IMPORTED_MODULE_0__.machineState.user.resources[resource].quantity -= consumption;\n}\n\n\n//# sourceURL=webpack://aframe-machines/./src/scripts/transactionHandlers/deductEnergy.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./src/scripts/main.ts");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/styles/main.scss");
/******/ 	
/******/ })()
;